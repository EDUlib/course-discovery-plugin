from django.shortcuts import render

# Create your views here.

from django.shortcuts import render
from django.http import HttpResponse
from django.http import JsonResponse
import requests ;
import json ;
from pprint import pprint ;

from datetime import datetime
from operator import itemgetter
from django.template import loader





def polymtl(request):
    w = requests.get('http://ec2-52-60-175-178.ca-central-1.compute.amazonaws.com:18381/api/v1/courses?limit=400', auth=('username', 'password')) ;

    json_data  = w.json()

    json_pretty_poly  = json.dumps(json_data,  sort_keys=True, indent=4)

    toto  = json_data
    toto2 = toto.get('results')

    current = datetime.now().isoformat()

    mylist = []
    for course in toto2:
       if course['course_runs']:
          y = course['course_runs']
          mylist.append(course)

    mylist2 = []
    for course in mylist:
       if course['owners']:
          y = course['owners']
          if "PolyMtl" in y[0]['key']:
             mylist2.append(course)


    #long = len(mylist2)
    #print "Nombre de cours Polymtl : %d" % long
    #print ('')
    ##### number of courses is ok #####

    ##### extracting course runs  #####
    mylist3 = []
    for course in mylist2:
       if course['course_runs']:
          y = course['course_runs']
          mylist3.append(y)

    long3 = len(mylist3)
    print "Nombre de cours Polymtl : %d" % long3
    print ('')
    ##### number of courses is ok #####

    ##### extracting first element of all courses #####
    mylist4 = []
    i = 0
    while i < long3:
       y = mylist3[i][0]
       #print y
       #print('')
       mylist4.append(y)
       i = i + 1

    ##### besoin contexte contenat 3 arrays: upcoming, current, done #####
    upcoming = []
    current  = []
    done     = []
    liste_totale = []

    ##### popule les 3 arrays #####
    for cours in mylist4:
        if cours['availability'] == "Upcoming" and not cours['hidden']:
           upcoming.append(cours)
        elif cours['availability'] == "Current" and not cours['hidden']:
             current.append(cours)
        elif cours['availability'] == "Archived":
             done.append(cours)

    ##### tri les 3 arrays selons les criteres EDUlib #####
    upcoming_by_start = sorted(upcoming, key=itemgetter('start'), reverse=True)
    current_by_start  = sorted(current, key=itemgetter('start'), reverse=True)
    done_by_start     = sorted(done, key=itemgetter('end'), reverse=True)

    ##### calcule la taille de chaque array #####
    upcoming_len = len(upcoming)
    current_len  = len(current)
    done_len     = len(done)
    print upcoming_len, current_len, done_len

    ##### ajouter les 3 arrays dans le contexte global #####
    liste_totale.append(upcoming_by_start)
    liste_totale.append(current_by_start)
    liste_totale.append(done_by_start)

    ##### calcule la taille du contexte global  #####
    #totale_len = len(liste_totale)
    #print totale_len
    #print liste_totale

    ##### initialise le contexte global #####
    context = {'cours_non_finis': liste_totale}

    return render(request, 'polls/polymtl.html', context)
    #return HttpResponse(json_pretty_poly, content_type="application/json")
    #return HttpResponse("DO I GET HERE")





def hec(request):
    w = requests.get('http://ec2-52-60-175-178.ca-central-1.compute.amazonaws.com:18381/api/v1/courses?limit=400', auth=('username', 'password')) ;

    json_data  = w.json()

    json_pretty_poly  = json.dumps(json_data,  sort_keys=True, indent=4)

    toto  = json_data
    toto2 = toto.get('results')

    current = datetime.now().isoformat()

    mylist = []
    for course in toto2:
       if course['course_runs']:
          y = course['course_runs']
          mylist.append(course)

    mylist2 = []
    for course in mylist:
       if course['owners']:
          y = course['owners']
          if "HEC" in y[0]['key']:
             mylist2.append(course)


    #long = len(mylist2)
    #print "Nombre de cours HEC : %d" % long
    #print ('')
    ##### number of courses is ok #####

    ##### extracting course runs  #####
    mylist3 = []
    for course in mylist2:
       if course['course_runs']:
          y = course['course_runs']
          mylist3.append(y)

    long3 = len(mylist3)
    #print "Nombre de cours HEC : %d" % long3
    #print ('')
    ##### number of courses is ok #####

    ##### extracting first element of all courses #####
    mylist4 = []
    i = 0
    while i < long3:
       y = mylist3[i][0]
       #print y
       #print('')
       mylist4.append(y)
       i = i + 1

    ##### besoin contexte contenat 3 arrays: upcoming, current, done #####
    upcoming = []
    current  = []
    done     = []
    liste_totale = []

    ##### popule les 3 arrays #####
    for cours in mylist4:
        if cours['availability'] == "Upcoming" and not cours['hidden']:
           upcoming.append(cours)
        elif cours['availability'] == "Current" and not cours['hidden']:
             current.append(cours)
        elif cours['availability'] == "Archived":
             done.append(cours)

    ##### tri les 3 arrays selons les criteres EDUlib #####
    upcoming_by_start = sorted(upcoming, key=itemgetter('start'), reverse=True)
    current_by_start  = sorted(current, key=itemgetter('start'), reverse=True)
    done_by_start     = sorted(done, key=itemgetter('end'), reverse=True)

    ##### calcule la taille de chaque array #####
    #upcoming_len = len(upcoming)
    #current_len  = len(current)
    #done_len     = len(done) 
    #print upcoming_len, current_len, done_len

    ##### ajouter les 3 arrays dans le contexte global #####
    liste_totale.append(upcoming_by_start)
    liste_totale.append(current_by_start)
    liste_totale.append(done_by_start)

    ##### calcule la taille du contexte global  #####
    #totale_len = len(liste_totale)
    #print totale_len
    #print liste_totale

    ##### initialise le contexte global #####
    context = {'cours_non_finis': liste_totale}

    return render(request, 'polls/hec.html', context)
    #return HttpResponse(json_pretty_poly, content_type="application/json")
    #return HttpResponse("DO I GET HERE")





def umontreal(request):
    w = requests.get('http://ec2-52-60-175-178.ca-central-1.compute.amazonaws.com:18381/api/v1/courses?limit=400', auth=('username', 'password')) ;

    json_data  = w.json()

    json_pretty_poly  = json.dumps(json_data,  sort_keys=True, indent=4)

    toto  = json_data
    toto2 = toto.get('results')

    current = datetime.now().isoformat()

    mylist = []
    for course in toto2:
       if course['course_runs']:
          y = course['course_runs']
          mylist.append(course)

    mylist2 = []
    for course in mylist:
       if course['owners']:
          y = course['owners']
          if "UMontreal" in y[0]['key']:
             mylist2.append(course)


    #long = len(mylist2)
    #print "Nombre de cours UdeM : %d" % long
    #print ('')
    ##### number of courses is ok #####

    ##### extracting course runs  #####
    mylist3 = []
    for course in mylist2:
       if course['course_runs']:
          y = course['course_runs']
          mylist3.append(y)

    long3 = len(mylist3)
    #print "Nombre de cours UdeM : %d" % long3
    #print ('')
    ##### number of courses is ok #####

    ##### extracting first element of all courses #####
    mylist4 = []
    i = 0
    while i < long3:
       y = mylist3[i][0]
       #print y
       #print('')
       mylist4.append(y)
       i = i + 1

    ##### besoin contexte contenat 3 arrays: upcoming, current, done #####
    upcoming = []
    current  = []
    done     = []
    liste_totale = []

    ##### popule les 3 arrays #####
    for cours in mylist4:
        if cours['availability'] == "Upcoming" and not cours['hidden']:
           upcoming.append(cours)
        elif cours['availability'] == "Current" and not cours['hidden']:
             current.append(cours)
        elif cours['availability'] == "Archived":
             done.append(cours)

    ##### tri les 3 arrays selons les criteres EDUlib #####
    upcoming_by_start = sorted(upcoming, key=itemgetter('start'), reverse=True)
    current_by_start  = sorted(current, key=itemgetter('start'), reverse=True)
    done_by_start     = sorted(done, key=itemgetter('end'), reverse=True)

    ##### calcule la taille de chaque array #####
    #upcoming_len = len(upcoming)
    #current_len  = len(current)
    #done_len     = len(done)
    #print upcoming_len, current_len, done_len

    ##### ajouter les 3 arrays dans le contexte global #####
    liste_totale.append(upcoming_by_start)
    liste_totale.append(current_by_start)
    liste_totale.append(done_by_start)

    ##### calcule la taille du contexte global  #####
    #totale_len = len(liste_totale)
    #print totale_len
    #print liste_totale

    ##### initialise le contexte global #####
    context = {'cours_non_finis': liste_totale}

    return render(request, 'polls/umontreal.html', context)
    #return HttpResponse(json_pretty_poly, content_type="application/json")
    #return HttpResponse("DO I GET HERE")




def index(request):
    ###########z = requests.get('http://ec2-35-182-73-26.ca-central-1.compute.amazonaws.com:18381/api/v1/courses?limit=400', auth=('username', 'password')) ;
    ###########z = requests.get('http://ec2-52-60-175-178.ca-central-1.compute.amazonaws.com:18381/api/v1/courses?limit=400', auth=('username', 'password')) ;
    z = requests.get('http://ec2-52-60-175-178.ca-central-1.compute.amazonaws.com:18381/api/v1/courses?limit=400', auth=('username', 'password')) ;
    #w = requests.get('http://ec2-52-60-175-178.ca-central-1.compute.amazonaws.com:18381/api/v1/course_runs/?q=ORG:Polymtl', auth=('username', 'password')) ;
    json_data  = z.json()
    #json_data2 = w.json()
    json_pretty  = json.dumps(json_data,  sort_keys=True, indent=4)
    #json_pretty2 = json.dumps(json_data2, sort_keys=True, indent=4)
    #
    # adding filtering
    #
    toto  = json_data
    print "Nombre de cours chez EDUlib : %d" % toto.get('count')
    print ('')
    current = datetime.now().isoformat()
    print "Il est actuellement : " + current
    print ('')

    toto2 = toto.get('results')


    #for course in toto2:
    #   if course['owners']:
    #      y = course['owners']
    #      #print(y)
    #      #if "UMontreal" in y[0]['key']:
    #      #if "HEC" in y[0]['key']:
    #      if "Sherbroo" in y[0]['key']:
    #         print(course['title'])

    mylist = []
    for course in toto2:
       if course['course_runs']:
          y = course['course_runs']
          #if (y[0]['start'] < current and y[0]['end'] > current) or (y[0]['start'] > current):
          if ((y[0]['start'] < current and y[0]['end'] > current) or (y[0]['start'] > current)) and (y[0]['availability'] == "Current" or y[0]['availability'] == "Upcoming"):
             mylist.append(y)

    mylist2 = mylist

    mylist3 = []
    long = len(mylist2)
    print "Nombre de cours non termines : %d" % long
    print ('')
    i = 0
    while i < long:
       y = mylist2[i]
       #print(y[0]['end'])
       #print(y[0])
       #print('')
       mylist3.append(y[0])
       i = i + 1 

    # de la fin la plus tard a la plus tot
    mylist3_by_end = sorted(mylist3, key=itemgetter('end'), reverse=True)

    # de la fin la plus tot a la plus tard
    #mylist3_by_end = sorted(mylist3, key=itemgetter('end'), reverse=False)

    long = len(mylist3_by_end)
    print "Liste des cours non termines : "
    i = 0
    while i < long:
       y = mylist3_by_end[i]
       print(y['key'])
       print(y['end'])
       i = i + 1 
       print ('')

    context = {'cours_non_finis': mylist3_by_end}

    return render(request, 'polls/index.html', context)
    #return HttpResponse(json_pretty, content_type="application/json")
